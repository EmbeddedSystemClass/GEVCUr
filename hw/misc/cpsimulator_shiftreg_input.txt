cpsimulator_shiftreg_input.txt
12/24/2019

Columns---
 1: header position (0 - 15);
 2: spi word bit (0 - 15)
 3: shift register pack-pin simulator
 4: connector J8-P8
 5: name
 6: shift register pin schematic
 7: shift register input name 1
 8: shift register input name 2
 9: #define name
10: simulator jumper to header:
     RB - wide ribbon - grn end <-> common
     CL - bundle - blk & bwn <-> common

8  15 1-06 P8-3  IN0   6 D7 H SW_SAFE    RB-brn sw: Safe position (NC closed)
9  14 1-05 P8-4  IN1   5 D6 G SW_ACTIVE  RB-blk sw: Active (NO closed)
10 13 1-04 P8-5  IN2   4 D5 F PB_ARM     RB-wht pb ARM
11 12 1-03 P8-6  IN3   3 D4 E PB_PREP    RB-gry Prep/Recovery
12 11 1-14 P8-7  IN4  14 D3 D CL_RST_N0  CL-wht CL pb rest position
13 10 1-13 P8-8  IN5  13 D2 C CP_SPARE11 RB-pur CL pb NOT rest position
14  9 1-12 P8-9  IN6  12 D1 B CP_SPARE10 RB-blu CL pb NOT forward position
15  8 1-11 P8-10 IN7  11 D0 A CL_FS_NO   CL-pur CL pb forward position

0   7 2-06 P8-11 IN8   6 D7 H CP_SPARE8  RB-red Brake
1   6 2-05 P8-12 IN9   5 D6 G CP_SPARE7  RB-org Guillotine
2   5 2-04 P8-13 IN10  4 D5 F CP_SPARE6  RB-yel Joggle Left
3   4 2-03 P8-14 IN11  3 D4 E CP_SPARE5  RB-grn Joggle Right
4   3 2-14 P8-15 IN12 14 D3 D CP_SPARE4  RB-blu Zero Odometer
5   2 2-13 P8-16 IN13 13 D2 C CP_SPARE3  RB-pur Zero tension
6   1 2-12 ..... IN14 12 D1 B CP_SPARE2  RB-gry
7   0 2-11 ..... IN15 11 D0 A CP_SPARE1  RB-wht

Wire colors on switch & pushbutton box
 common - black
--toggle switches:
sw 1 yellow
sw 2 green
sw 3 blue
sw 4 purple
--pushbuttons:
pb 1 brown
pb 2 red
pb 3 orange
pb 4 yellow
 

Wire colors on simulator module board--
Col 1: Switch header
Col 2: Shift register pin
Col 3: Wire color

 0 2-06 grn
 1 2-05 yel
 2 2-04 wht
 3 2-03 blu
 4 2-14 grn
 5 2-13 yel
 6 2-12 wht
 7 2-11 blu
 8 1-06 grn
 9 1-05 yel
10 1-04 wht
11 1-03 blu
12 1-14 grn
13 1-13 yel
14 1-12 wht
15 1-11 blu 

shift register interconnect
1-09 to 2-10 grn

//	Sixteen control panel switch mapping (original)
//  See: ../GEVCUr/Ourtasks/shiftregbits.h
#define SW_SAFE    (1 << 15)	//	active low
#define SW_ACTIVE  (1 << 14)	//	active low
#define PB_ARM     (1 << 13)	//	active low
#define PB_PREP    (1 << 12)	//	active low
#define CL_RST_N0  (1 << 11)	//	Control Lever:Rest switch (low) 
#define CP_SPARE11 (1 << 10)  //
#define CP_SPARE10 (1 <<  9)  //
#define CL_FS_NO   (1 <<  8)	// Control Lever:Forward switch (low)
#define CP_BRAKE   (1 <<  7)  // Brake
#define CP_GUILLO  (1 <<  6)  // Guillotine
#define CP_JOGLEFT (1 <<  5)  // Joggle Left
#define CP_JOGRITE (1 <<  4)  // Joggle Right
#define CP_ZODOMTR (1 <<  3)  // Zero Odometer
#define CP_ZTENSION (1 <<  3) // Zero tension
#define CP_SPARE2  (1 <<  2)  //
#define CP_SPARE1  (1 <<  0)  //

// GSM CP test: 1/19/20 FFxx (high byte not connected)
// NOTE: shift reg 'H' bit is sent first, and is spi msb.
// STM32 16b word reverses order of bytes sent, i.e. the
//  output of 0x1122 has the byte with 0x22 sent first.
//                   (low byte) sw off on (on = active low)
#define SW_SAFE     (1 <<  7)	//	F7 77  P8-3  IN 0 H
#define SW_ACTIVE   (1 <<  6)	//	F7 B7  P8-4  IN 1 G
#define PB_ARM      (1 <<  5)	//	77 57  P8-5  IN 2 F
#define PB_PREP     (1 <<  4)	//	77 67  P8-6  IN 3 E
#define CL_RST_N0   (1 <<  3)	//	7F 77  P8-7  IN 4 D
#define CP_ZTENSION (1 <<  2) // 77 73  P8-8  IN 5 C
#define CP_ZODOMTR  (1 <<  1) // 77 75  P8-9  IN 6 B
#define CL_FS_NO    (1 <<  0)	// 7F 7E  P8_10 IN 7 A

// High byte not yet connected (?)
#define CP_SPARE1  (1 << 15)  // Not on connector   IN 15 A
#define CP_SPARE2  (1 << 14)  // Not on connector   IN 14 B
#define CP_SPARE2  (1 << 13)  // Zero tension P8-16 IN 13 C
#define CP_SPARE2  (1 << 12)  // Zero odometerP8-15 IN 12 D
#define CP_JOGRITE (1 << 11)  // Joggle Right P8-14 IN 11 E
#define CP_JOGLEFT (1 << 10)  // Joggle Left  P8-13 IN 10 F
#define CP_GUILLO  (1 <<  9)  // Guillotine   P8-12 IN  9 G
#define CP_BRAKE   (1 <<  8)  // Brake        P8-11 IN  8 H 



